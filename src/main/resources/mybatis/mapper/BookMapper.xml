<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.mapper.BookMapper">

    <select id="queryBooksList" resultType="Books">
        select * from project.books LIMIT #{first}, #{second}
    </select>

    <select id="fuzzyQuery" resultType="Books">
        select * from project.books
        where bookName LIKE #{bookName}
        OR author LIKE #{author}
        OR publisher LIKE #{publisher}
        LIMIT #{first}, #{second}
    </select>


    <select id="queryBooksById" resultType="Books">
        select * from project.books where bookId = #{bookId}
    </select>


    <select id="queryBooksByAdminId" resultType="Books">
        select * from project.books where adminId = #{adminId}
    </select>

    <select id="queryBooksByBookname" resultType="Books">
        select * from project.books where bookName = #{bookName}
    </select>


    <select id="addBook" parameterType="Books">
        insert into books (bookName, price, bookCounts, detail, publisher, author, photoAddress, clickTime, department, adminId)
        values (#{bookName}, #{price}, #{bookCounts}, #{detail}, #{publisher}, #{author}, #{photoAddress}, #{clickTime}, #{department}, #{adminId})
    </select>

    <select id="updateBook" parameterType="Books">
        update books set bookName = #{bookName}, price = #{price}, detail = #{detail}, publisher = #{publisher}, author = #{author},
        photoAddress = #{photoAddress}, clickTime = #{clickTime}, department = #{department}, adminId = #{adminId}
        where bookId = #{bookId}
    </select>

    <select id="deleteBook" parameterType="Books">
        delete from books where bookId = #{bookId}
    </select>

    <select id="cartItems" resultType="Books">
        select * from books join user_books on (books.bookId = user_books.bookId) and user_books.userId = #{userId}
    </select>

    <select id="oneBook" resultType="Books">
        select * from books join user_books on (books.bookId = user_books.bookId) and user_books.userId = #{userId} and user_books.bookId = #{bookId} and user_books.status = "ordered"
    </select>

    <select id="addToCart" parameterType="Books">
        insert into project.user_books (userId, bookId, numbers, status)
        values (#{userId}, #{bookId}, 1, "ordered")
    </select>

    <select id="updateCart" parameterType="Books">
        update project.user_books set numbers = #{numbers} where userId = #{userId} and bookId = #{bookId}
    </select>

    <select id="removeItem" parameterType="Books">
        delete from project.user_books where userId = #{userId} and bookId = #{bookId}
    </select>

<!--    for allBook table   -->

    <select id="addAllBook" parameterType="Books">
        insert into project.allBooks (bookName, price, bookCounts, detail, publisher, author, photoAddress, clickTime, department, adminId)
        values (#{bookName}, #{price}, #{bookCounts}, #{detail}, #{publisher}, #{author}, #{photoAddress}, #{clickTime}, #{department}, #{adminId})
    </select>

    <select id="updateAllBook" parameterType="Books">
        update project.allBooks set bookName = #{bookName}, price = #{price}, detail = #{detail}, publisher = #{publisher}, author = #{author},
        photoAddress = #{photoAddress}, clickTime = #{clickTime}, department = #{department}, adminId = #{adminId}
        where bookId = #{bookId}
    </select>

    <select id="deleteAllBook" parameterType="Books">
        delete from project.allBooks where bookId = #{bookId}
    </select>

    <select id="queryCartByUserId" resultType="java.util.HashMap">
        select u.ubId, u.numbers, u.bookId, b.bookName, b.price, b.author from books b join user_books u on b.bookId = u.bookId where u.userId = #{userId} and
        u.status = "ordered"
    </select>

    <select id="deleteCartById">
        delete from user_books where ubId = #{ubId}
    </select>

    <select id="updateCartStatus">
        update project.user_books set status = "purchased" where userId = #{userId} and bookId = #{bookId}
    </select>

    <select id="updateStock">
        update project.books set bookCounts = bookCounts - #{bookCounts} where bookId = #{bookId}
    </select>

    <select id="queryBookViewTime" resultType="java.util.HashMap">
        select bookName, clickTime from books where clickTime > 0 order by clickTime DESC LIMIT 5
    </select>

    <select id="queryBookSold" resultType="java.util.HashMap">
        select b.bookName, t.total from books b join (select bookId, SUM(numbers) as total from user_books where status = "purchased" group by bookId) t on b.bookId = t.bookId where total > 0 order by total DESC LIMIT 5
    </select>

    <select id="updateClickTime" parameterType="Books">
        update project.books set clickTime = clickTime+1 where bookId = #{bookId}
    </select>

    <select id="recommendation" resultType="Books">
        select * from project.books where department = #{department}  LIMIT #{first},#{second}
    </select>

    <select id="queryCartItem" resultType="integer">
        select numbers from user_books where userId = #{userId} and
        status = "ordered" and bookId = #{bookId}
    </select>
</mapper>